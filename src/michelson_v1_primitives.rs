
#[derive(Debug, PartialEq, Clone)]
#[allow(non_camel_case_types)]
pub enum Primitive {
  K_parameter,
  K_storage,
  K_code,
  K_view,
  D_False,
  D_Elt,
  D_Left,
  D_None,
  D_Pair,
  D_Right,
  D_Some,
  D_True,
  D_Unit,
  I_PACK,
  I_UNPACK,
  I_BLAKE2B,
  I_SHA256,
  I_SHA512,
  I_ABS,
  I_ADD,
  I_AMOUNT,
  I_AND,
  I_BALANCE,
  I_CAR,
  I_CDR,
  I_CHAIN_ID,
  I_CHECK_SIGNATURE,
  I_COMPARE,
  I_CONCAT,
  I_CONS,
  I_CREATE_ACCOUNT,
  I_CREATE_CONTRACT,
  I_IMPLICIT_ACCOUNT,
  I_DIP,
  I_DROP,
  I_DUP,
  I_VIEW,
  I_EDIV,
  I_EMPTY_BIG_MAP,
  I_EMPTY_MAP,
  I_EMPTY_SET,
  I_EQ,
  I_EXEC,
  I_APPLY,
  I_FAILWITH,
  I_GE,
  I_GET,
  I_GET_AND_UPDATE,
  I_GT,
  I_HASH_KEY,
  I_IF,
  I_IF_CONS,
  I_IF_LEFT,
  I_IF_NONE,
  I_INT,
  I_LAMBDA,
  I_LE,
  I_LEFT,
  I_LEVEL,
  I_LOOP,
  I_LSL,
  I_LSR,
  I_LT,
  I_MAP,
  I_MEM,
  I_MUL,
  I_NEG,
  I_NEQ,
  I_NIL,
  I_NONE,
  I_NOT,
  I_NOW,
  I_MIN_BLOCK_TIME,
  I_OR,
  I_PAIR,
  I_UNPAIR,
  I_PUSH,
  I_RIGHT,
  I_SIZE,
  I_SOME,
  I_SOURCE,
  I_SENDER,
  I_SELF,
  I_SELF_ADDRESS,
  I_SLICE,
  I_STEPS_TO_QUOTA,
  I_SUB,
  I_SUB_MUTEZ,
  I_SWAP,
  I_TRANSFER_TOKENS,
  I_SET_DELEGATE,
  I_UNIT,
  I_UPDATE,
  I_XOR,
  I_ITER,
  I_LOOP_LEFT,
  I_ADDRESS,
  I_CONTRACT,
  I_ISNAT,
  I_CAST,
  I_RENAME,
  I_SAPLING_EMPTY_STATE,
  I_SAPLING_VERIFY_UPDATE,
  I_DIG,
  I_DUG,
  I_NEVER,
  I_VOTING_POWER,
  I_TOTAL_VOTING_POWER,
  I_KECCAK,
  I_SHA3,
  I_PAIRING_CHECK,
  I_TICKET,
  I_READ_TICKET,
  I_SPLIT_TICKET,
  I_JOIN_TICKETS,
  I_OPEN_CHEST,
  I_EMIT,
  T_bool,
  T_contract,
  T_int,
  T_key,
  T_key_hash,
  T_lambda,
  T_list,
  T_map,
  T_big_map,
  T_nat,
  T_option,
  T_or,
  T_pair,
  T_set,
  T_signature,
  T_string,
  T_bytes,
  T_mutez,
  T_timestamp,
  T_unit,
  T_operation,
  T_address,
  T_tx_rollup_l2_address,
  T_sapling_transaction,
  T_sapling_transaction_deprecated,
  T_sapling_state,
  T_chain_id,
  T_never,
  T_bls12_381_g1,
  T_bls12_381_g2,
  T_bls12_381_fr,
  T_ticket,
  T_chest_key,
  T_chest,
  H_constant
}

const PRIMS: [Primitive; 152] = [
    Primitive::K_parameter,
    Primitive::K_storage,
    Primitive::K_code,
    Primitive::D_False,
    Primitive::D_Elt,
    Primitive::D_Left,
    Primitive::D_None,
    Primitive::D_Pair,
    Primitive::D_Right,
    Primitive::D_Some,
    Primitive::D_True,
    Primitive::D_Unit,
    Primitive::I_PACK,
    Primitive::I_UNPACK,
    Primitive::I_BLAKE2B,
    Primitive::I_SHA256,
    Primitive::I_SHA512,
    Primitive::I_ABS,
    Primitive::I_ADD,
    Primitive::I_AMOUNT,
    Primitive::I_AND,
    Primitive::I_BALANCE,
    Primitive::I_CAR,
    Primitive::I_CDR,
    Primitive::I_CHECK_SIGNATURE,
    Primitive::I_COMPARE,
    Primitive::I_CONCAT,
    Primitive::I_CONS,
    Primitive::I_CREATE_ACCOUNT,
    Primitive::I_CREATE_CONTRACT,
    Primitive::I_IMPLICIT_ACCOUNT,
    Primitive::I_DIP,
    Primitive::I_DROP,
    Primitive::I_DUP,
    Primitive::I_EDIV,
    Primitive::I_EMPTY_MAP,
    Primitive::I_EMPTY_SET,
    Primitive::I_EQ,
    Primitive::I_EXEC,
    Primitive::I_FAILWITH,
    Primitive::I_GE,
    Primitive::I_GET,
    Primitive::I_GT,
    Primitive::I_HASH_KEY,
    Primitive::I_IF,
    Primitive::I_IF_CONS,
    Primitive::I_IF_LEFT,
    Primitive::I_IF_NONE,
    Primitive::I_INT,
    Primitive::I_LAMBDA,
    Primitive::I_LE,
    Primitive::I_LEFT,
    Primitive::I_LOOP,
    Primitive::I_LSL,
    Primitive::I_LSR,
    Primitive::I_LT,
    Primitive::I_MAP,
    Primitive::I_MEM,
    Primitive::I_MUL,
    Primitive::I_NEG,
    Primitive::I_NEQ,
    Primitive::I_NIL,
    Primitive::I_NONE,
    Primitive::I_NOT,
    Primitive::I_NOW,
    Primitive::I_OR,
    Primitive::I_PAIR,
    Primitive::I_PUSH,
    Primitive::I_RIGHT,
    Primitive::I_SIZE,
    Primitive::I_SOME,
    Primitive::I_SOURCE,
    Primitive::I_SENDER,
    Primitive::I_SELF,
    Primitive::I_STEPS_TO_QUOTA,
    Primitive::I_SUB,
    Primitive::I_SWAP,
    Primitive::I_TRANSFER_TOKENS,
    Primitive::I_SET_DELEGATE,
    Primitive::I_UNIT,
    Primitive::I_UPDATE,
    Primitive::I_XOR,
    Primitive::I_ITER,
    Primitive::I_LOOP_LEFT,
    Primitive::I_ADDRESS,
    Primitive::I_CONTRACT,
    Primitive::I_ISNAT,
    Primitive::I_CAST,
    Primitive::I_RENAME,
    Primitive::T_bool,
    Primitive::T_contract,
    Primitive::T_int,
    Primitive::T_key,
    Primitive::T_key_hash,
    Primitive::T_lambda,
    Primitive::T_list,
    Primitive::T_map,
    Primitive::T_big_map,
    Primitive::T_nat,
    Primitive::T_option,
    Primitive::T_or,
    Primitive::T_pair,
    Primitive::T_set,
    Primitive::T_signature,
    Primitive::T_string,
    Primitive::T_bytes,
    Primitive::T_mutez,
    Primitive::T_timestamp,
    Primitive::T_unit,
    Primitive::T_operation,
    Primitive::T_address,
    Primitive::I_SLICE,
    Primitive::I_DIG,
    Primitive::I_DUG,
    Primitive::I_EMPTY_BIG_MAP,
    Primitive::I_APPLY,
    Primitive::T_chain_id,
    Primitive::I_CHAIN_ID,
    Primitive::I_LEVEL,
    Primitive::I_SELF_ADDRESS,
    Primitive::T_never,
    Primitive::I_NEVER,
    Primitive::I_UNPAIR,
    Primitive::I_VOTING_POWER,
    Primitive::I_TOTAL_VOTING_POWER,
    Primitive::I_KECCAK,
    Primitive::I_SHA3,
    Primitive::I_PAIRING_CHECK,
    Primitive::T_bls12_381_g1,
    Primitive::T_bls12_381_g2,
    Primitive::T_bls12_381_fr,
    Primitive::T_sapling_state,
    Primitive::T_sapling_transaction_deprecated,
    Primitive::I_SAPLING_EMPTY_STATE,
    Primitive::I_SAPLING_VERIFY_UPDATE,
    Primitive::T_ticket,
    Primitive::I_TICKET,
    Primitive::I_READ_TICKET,
    Primitive::I_SPLIT_TICKET,
    Primitive::I_JOIN_TICKETS,
    Primitive::I_GET_AND_UPDATE,
    Primitive::T_chest,
    Primitive::T_chest_key,
    Primitive::I_OPEN_CHEST,
    Primitive::I_VIEW,
    Primitive::K_view,
    Primitive::H_constant,
    Primitive::I_SUB_MUTEZ,
    Primitive::T_tx_rollup_l2_address,
    Primitive::I_MIN_BLOCK_TIME,
    Primitive::T_sapling_transaction,
    Primitive::I_EMIT
];

impl Primitive {
    pub fn to_int_enum(&self) -> u8 {
        // TODO: we can do a lot better
        for (index, prim) in PRIMS.iter().enumerate() {
            if prim == self {
                return index as u8;
            }
        }

        panic!("Should not be reachable");
    }

    pub fn from_int_enum(val: u8) -> Option<Primitive> {
        let index = val as usize;
        if index < PRIMS.len() {
            Some(PRIMS[index].clone())
        } else {
            None
        }
    }
}
